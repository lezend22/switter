[{"/home/seunghwan/project/twitter/switter/src/index.js":"1","/home/seunghwan/project/twitter/switter/src/components/App.js":"2","/home/seunghwan/project/twitter/switter/src/components/Router.js":"3","/home/seunghwan/project/twitter/switter/src/routes/Auth.js":"4","/home/seunghwan/project/twitter/switter/src/routes/Home.js":"5","/home/seunghwan/project/twitter/switter/src/fbase.js":"6","/home/seunghwan/project/twitter/switter/src/routes/Profile.js":"7","/home/seunghwan/project/twitter/switter/src/components/Navigation.js":"8","/home/seunghwan/project/twitter/switter/src/components/Sweet.js":"9"},{"size":292,"mtime":1609844645662,"results":"10","hashOfConfig":"11"},{"size":932,"mtime":1609775393933,"results":"12","hashOfConfig":"11"},{"size":1135,"mtime":1609844624682,"results":"13","hashOfConfig":"11"},{"size":3174,"mtime":1609863186000,"results":"14","hashOfConfig":"11"},{"size":3787,"mtime":1609864913620,"results":"15","hashOfConfig":"11"},{"size":628,"mtime":1609842059872,"results":"16","hashOfConfig":"11"},{"size":2746,"mtime":1609867319080,"results":"17","hashOfConfig":"11"},{"size":1063,"mtime":1609872744890,"results":"18","hashOfConfig":"11"},{"size":2168,"mtime":1609866832540,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"c89ahj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/home/seunghwan/project/twitter/switter/src/index.js",[],["43","44"],"/home/seunghwan/project/twitter/switter/src/components/App.js",[],"/home/seunghwan/project/twitter/switter/src/components/Router.js",[],"/home/seunghwan/project/twitter/switter/src/routes/Auth.js",["45"],"import React, { useState } from \"react\";\nimport { authService, firebaseInstance } from \"../fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst inputStyles = {};\n\nconst Auth = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // eslint-disable-next-line\n  const [newAccount, setAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    //target goes to <input>form\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"useremail\") {\n      setEmail(value);\n    } else if (name === \"userPassword\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      if (newAccount) {\n        await authService.createUserWithEmailAndPassword(email, password);\n        //create account\n      } else {\n        await authService.signInWithEmailAndPassword(email, password);\n        //log in\n      }\n    } catch (error) {\n      setError(error.message);\n      console.log(\"check out auth\");\n    }\n  };\n  const setToggle = () => {\n    setAccount((potato) => !potato);\n  };\n  const onClickSocial = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n      //get google\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n      //get github\n    }\n    await authService.signInWithPopup(provider);\n  };\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          type=\"text\"\n          name=\"useremail\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange} //because onchange is in here\n          className=\"authInput\"\n        ></input>\n        <input\n          type=\"password\"\n          name=\"userPassword\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          className=\"authInput\"\n          onChange={onChange}\n        ></input>\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"Create Account\" : \"Log in\"}\n        ></input>\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={setToggle} className=\"authSwitch\">\n        {newAccount ? \"Sign in\" : \"Create Account\"}\n        {console.log(newAccount)}\n      </span>\n      <div className=\"authBtns\">\n        <button onClick={onClickSocial} name=\"google\" className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onClickSocial} name=\"github\" className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n","/home/seunghwan/project/twitter/switter/src/routes/Home.js",["46"],"import React, { useEffect, useState } from \"react\";\nimport Sweet from \"../components/Sweet\";\nimport { dbService, storageService } from \"../fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Home = ({ userObj }) => {\n  const [sweet, setSweet] = useState(\"\");\n  const [sweets, setSweets] = useState([]);\n  const [attachment, setAttachment] = useState(null);\n\n  const getSweets = () => {\n    dbService.collection(\"sweet\").onSnapshot((snap) => {\n      const dbArray = snap.docs.map((document) => ({\n        id: document.id, //its not same with createdID\n        ...document.data(),\n      }));\n      setSweets(dbArray);\n      console.log(\"getsweet\");\n    });\n  };\n\n  useEffect(() => {\n    getSweets();\n    console.log(\"homeeffect\");\n  }, []);\n\n  const onSubmit = async (event) => {\n    if (sweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmenturl = \"\";\n    if (attachment !== null) {\n      const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n      const uploadResponse = await fileRef.putString(attachment, \"data_url\");\n      attachmenturl = await uploadResponse.ref.getDownloadURL();\n    }\n    const insertObj = {\n      text: sweet,\n      createdAt: Date.now(),\n      createdId: userObj.uid,\n      attachmenturl,\n    };\n    await dbService.collection(\"sweet\").add(insertObj);\n    setSweet(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSweet(value);\n  };\n\n  const onChangeFile = (event) => {\n    const {\n      target: { files },\n    } = event;\n    if (files.length !== 0) {\n      //파일선택안하고 취소할시 생성되는 bugfix\n      const theFile = files[0]; //theFile의 format : File\n      const reader = new FileReader();\n      reader.readAsDataURL(theFile); //특정file에서 읽어오는역활\n      reader.onloadend = (event) => {\n        //eventListner에서 읽어옴\n        const {\n          currentTarget: { result },\n        } = event;\n        setAttachment(result);\n      };\n    }\n  };\n  const onAttachment = (event) => {\n    setAttachment(\"\");\n  };\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"factoryForm\">\n        <div className=\"factoryInput__container\">\n          <input\n            className=\"factoryInput__input\"\n            value={sweet}\n            onChange={onChange}\n            type=\"text\"\n            placeholder=\"What's on your mind?\"\n            maxLength={120}\n          />\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n        </div>\n        <label for=\"attach-file\" className=\"factoryInput__label\">\n          <span>Add photos</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"attach-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onChangeFile}\n          style={{\n            opacity: 0,\n          }}\n        ></input>\n        {attachment && (\n          <div className=\"factoryForm__attachment\">\n            <img\n              src={attachment}\n              style={{\n                backgroundImage: attachment,\n              }}\n            />\n            <div className=\"factoryForm__clear\" onClick={onAttachment}>\n              <span>Remove</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )}\n      </form>\n      <div style={{ marginTop: 30 }}>\n        {sweets.map((sweet) => (\n          <Sweet\n            sweetObj={sweet}\n            key={sweet.id}\n            check={sweet.createdId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","/home/seunghwan/project/twitter/switter/src/fbase.js",[],"/home/seunghwan/project/twitter/switter/src/routes/Profile.js",["47","48","49","50","51","52"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Sweet from \"../components/Sweet\";\nimport { authService, dbService } from \"../fbase\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const [sweets, setSweets] = useState([]);\n  const [EditProfile, setEditProfile] = useState(false);\n  const [newDisplayName, setDisplayName] = useState(userObj.displayName);\n  const history = useHistory();\n  const onLogoutClick = (event) => {\n    authService.signOut();\n    history.push(\"/\"); //if user sign out finds '/' from history stack\n  };\n\n  /* const getMySweets = () => {\n    dbService.collection(\"sweet\").onSnapshot((snap) => {\n      const dbArray = snap.docs.map((document) => ({\n        id: document.id, //its not same with createdID\n        ...document.data(),\n      }));\n      setSweets(dbArray);\n      /* const data = await dbService\n      .collection(\"sweet\")\n      .where(\"createdId\", \"==\", userObj.uid)\n      .get(); //should put string in first prop\n    console.log(data.docs.map((doc) => doc.data()));\n    const dbArray = data.docs.map((doc) => doc.data());\n    setSweets(dbArray);\n    console.log(sweets); */\n\n  const onChangeName = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setDisplayName(value);\n  };\n\n  const onDisplaySubmit = async (event) => {\n    event.preventDefault();\n    if (newDisplayName !== userObj.displayName) {\n      await userObj\n        .updateProfile({ displayName: newDisplayName })\n        .then(() => window.alert(\"Profile update Successfully!\"));\n      setEditProfile(false);\n      refreshUser();\n    }\n  };\n\n  const onClickProfile = () => {\n    setEditProfile((prev) => !prev);\n  };\n\n  useEffect(() => {\n    //getMySweets();\n    console.log(\"profileEffect\");\n  }, []);\n\n  return (\n    <div className=\"container\">\n      {/* <button onClick={onClickProfile}>Edit Profile</button>\n      {EditProfile && ( */}\n      <form onSubmit={onDisplaySubmit} className=\"profileForm\">\n        <input\n          type=\"text\"\n          placeholder=\"Change Display Name\"\n          value={newDisplayName}\n          autoFocus\n          onChange={onChangeName}\n          className=\"formInput\"\n        ></input>\n        <input\n          type=\"submit\"\n          value=\"Update Name\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogoutClick}>\n        Log Out\n      </span>\n      {/* <div>\n        {sweets.map((sweet) => (\n          <Sweet\n            sweetObj={sweet}\n            key={sweet.id}\n            check={sweet.createdId === userObj.uid}\n          />\n        ))}\n      </div> */}\n    </div>\n  );\n};\nexport default Profile;\n","/home/seunghwan/project/twitter/switter/src/components/Navigation.js",[],"/home/seunghwan/project/twitter/switter/src/components/Sweet.js",["53"],"import React, { useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Sweet = ({ sweetObj, check }) => {\n  const [editing, setEditing] = useState(false);\n  const [newSweet, setNewSweet] = useState(sweetObj.text);\n\n  const toggleEditing = () => setEditing((prev) => !prev); //returns oposite previous value\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure want to Delete it?\");\n    if (ok) {\n      await dbService.doc(`sweet/${sweetObj.id}`).delete();\n      await storageService.refFromURL(sweetObj.attachmenturl).delete();\n    }\n  };\n\n  const onEditChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewSweet(value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`sweet/${sweetObj.id}`).update({ text: newSweet });\n    setEditing(false);\n  };\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"Edit your sweet!\"\n              value={newSweet}\n              required\n              autoFocus\n              onChange={onEditChange}\n              className=\"formInput\"\n            />\n            <input type=\"submit\" value=\"Update\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </span>\n        </>\n      ) : (\n        <>\n          <h4>{sweetObj.text}</h4>\n          {sweetObj.attachmenturl && <img src={sweetObj.attachmenturl} />}\n          {check && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Sweet;\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":10,"column":7,"nodeType":"60","messageId":"61","endLine":10,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":108,"column":13,"nodeType":"64","endLine":113,"endColumn":15},{"ruleId":"58","severity":1,"message":"65","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":13},{"ruleId":"58","severity":1,"message":"66","line":4,"column":23,"nodeType":"60","messageId":"61","endLine":4,"endColumn":32},{"ruleId":"58","severity":1,"message":"67","line":7,"column":10,"nodeType":"60","messageId":"61","endLine":7,"endColumn":16},{"ruleId":"58","severity":1,"message":"68","line":7,"column":18,"nodeType":"60","messageId":"61","endLine":7,"endColumn":27},{"ruleId":"58","severity":1,"message":"69","line":8,"column":10,"nodeType":"60","messageId":"61","endLine":8,"endColumn":21},{"ruleId":"58","severity":1,"message":"70","line":50,"column":9,"nodeType":"60","messageId":"61","endLine":50,"endColumn":23},{"ruleId":"62","severity":1,"message":"63","line":55,"column":38,"nodeType":"64","endLine":55,"endColumn":74},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'inputStyles' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Sweet' is defined but never used.","'dbService' is defined but never used.","'sweets' is assigned a value but never used.","'setSweets' is assigned a value but never used.","'EditProfile' is assigned a value but never used.","'onClickProfile' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]